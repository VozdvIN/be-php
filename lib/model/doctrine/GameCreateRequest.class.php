<?php

/**
 * GameCreateRequest
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    sf
 * @subpackage model
 * @author     VozdvIN
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class GameCreateRequest extends BaseGameCreateRequest implements IStored, IAuth
{
  const MAX_REQUESTS_PER_TEAM = 3; // Максимальное число активных заявок от одной команды.
  
  //// IStored ////
  
  static function all()
  {
    return Utils::all('GameCreateRequest');
  }
 
  static function byId($id)
  {
    return Utils::byId('GameCreateRequest', $id);
  }

	//// IAuth ////

	static function isModerator(WebUser $account)
	{
		return $account->can(Permission::GAME_MODER, 0);
	}

	function canBeManaged(WebUser $account)
	{
		return $this->Team->canBeManaged($account);
	}

	function canBeObserved(WebUser $account)
	{
		return $this->Team->canBeObserved($account);
	}

	//// Public ////

	/**
	 * Возвращает список заявок на создание команды, поданные пользователем
	 * 
	 * @param  WebUser  $user 
	 * @return Doctrine_Colleсtion<TeamCreateRequest>
	 */
	public static function getForWithRelations(WebUser $user)
	{
		$query = Doctrine::getTable('GameCreateRequest')
			->createQuery('gcr')
			->innerJoin('gcr.Team')
			->select()
			->execute();

		$result = new Doctrine_Collection('GameCreateRequest');

		foreach ($query as $gameCreateRequest) {
			if ($gameCreateRequest->Team->canBeManaged($user))
			{
				$result->add($gameCreateRequest);
			}
		}

		return $result;
	}

	/**
	 * Возвращает список заявок на создание игр, поданных указанной командой.
	 * 
	 * @param  Team  $team 
	 * @return Doctrine_Colleсtion<GameCreateRequest>
	 */
	public function getForTeam(Team $team)
	{
		return Doctrine::getTable('GameCreateRequest')
			->createQuery('gcr')
			->select()
			->where('gcr.team_id = ?', $this->_team->id)
			->execute();
	}

  /**
   * Создает игру по заявке, заявка удаляется.
   * 
   * @param   GameCreateRequest   $gameCreateRequest  заявка
   * 
   * @return  Game                                    созданная игра
   */
  public static function doCreate(GameCreateRequest $gameCreateRequest)
  {
    $game = new Game;
    $game->name = $gameCreateRequest->name;
    $game->team_id = $gameCreateRequest->team_id;
    $game->initDefaults();
    $game->region_id = $gameCreateRequest->Team->getRegionSafe()->id;
    $game->save();

    $gameCreateRequest->delete();

    return $game;
  }
  
}